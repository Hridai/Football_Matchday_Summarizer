from enaml.widgets.api import *
from enaml.layout.api import *
from enaml.stdlib.fields import IntField
from enaml.core.api import Include
from controller import MatchDaySummaryController


enamldef Main(Window):
    title = 'Football Matchday Summarizer'
#    maximized
    attr controller = MatchDaySummaryController()
    Container:
        constraints << [vbox(
                            container_inputs,
                            spc,
                            container_result
                        )]
        Container: container_inputs:
            constraints << [hbox(form_league_code, form_match_day)]
            Form: form_league_code:
                constraints << [lbl_league.right == combo_league.left - 10]
                Label: lbl_league:
                    text = 'League Code'
                ObjectCombo: combo_league:
                    items = ['PL', 'PD', 'BL1', 'SA', '']
                    selected := controller.league_code
            Container: form_match_day:
                constraints << [hbox(lbl_match_day, int_match_day, btn_prev_day, btn_next_day, spacer),
                                lbl_match_day.top == int_match_day.top,
                                btn_next_day.width == 25,
                                btn_prev_day.width == 25,
                                align('v_center', lbl_match_day, int_match_day, btn_prev_day, btn_next_day)
                                ]
                Label: lbl_match_day:
                    text = 'Match Day'
                IntField: int_match_day:
                    read_only = True
                    value := controller.match_day
                    minimum = 0
                PushButton: btn_next_day:
                    text = '+'
                    clicked::
                        controller.increment_match_day()
                PushButton: btn_prev_day:
                    text = '-'
                    clicked::
                        controller.decrement_match_day()

        Separator: spc:
            pass
        Container: container_result:
            constraints << [hbox(home_teams, scores, away_teams)]
            Container: home_teams:
                Label:
                    text = "Home Team"
                Include:
                    objects << [Label(text=team) for team in controller.home_teams]
            Container: scores:
                Label:
                    text = ""
                Include:
                    objects << [Label(text=score) for score in controller.scores]
            Container: away_teams:
                Label:
                    text = "Away Team"
                Include:
                    objects << [Label(text=team) for team in controller.away_teams]


